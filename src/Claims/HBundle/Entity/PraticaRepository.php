<?php

namespace Claims\HBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PraticaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PraticaRepository extends EntityRepository {

    public function filtra($filtri = array()) {
        if (!isset($filtri['in'])) {
            $filtri['in'] = array();
        }
        if (!isset($filtri['out'])) {
            $filtri['out'] = array();
        }
        if (!isset($filtri['lt'])) {
            $filtri['lt'] = array();
        }
        if (!isset($filtri['gt'])) {
            $filtri['gt'] = array();
        }
        if (!isset($filtri['bt'])) {
            $filtri['bt'] = array();
        }
        if (!isset($filtri['ob'])) {
            $filtri['ob'] = array('p.dasc', 'DESC');
        }
        $q = $this->createQueryBuilder('p');
        foreach ($filtri['in'] as $field => $value) {
            if (is_null($value)) {
                $q->andWhere("p.{$field} IS NULL");
            } else {
                switch ($field) {
                    case 'claimant':
                        $q->andWhere("p.{$field} LIKE :{$field}")
                                ->setParameter($field, "%{$value}%");
                        break;
                    case 'dasc':
                    case 'dol':
                    case 'don':
                    case 'medical_examiner':
                    case 'legal_team':
                        $q->andWhere("p.{$field} = :{$field}")
                                ->setParameter($field, \DateTime::createFromFormat('d-m-Y', $value));
                    default:
                        if (is_array($value)) {
                            if (count($value) == 0) {
                                $value[] = 0;
                            }
                            $q->andWhere($q->expr()->in("p.{$field}", $value));
                        } else {
                            $q->andWhere("p.{$field} = :{$field}")
                                    ->setParameter($field, $value);
                        }
                        break;
                }
            }
        }
        foreach ($filtri['out'] as $field => $value) {
            if (is_null($value)) {
                    $q->andWhere("p.{$field} IS NOT NULL");
            } else {
                switch ($field) {
                    case 'claimant':
                        $q->andWhere("p.{$field} NOT LIKE :{$field}")
                                ->setParameter($field, "%{$value}%");
                        break;
                    case 'dasc':
                    case 'dol':
                    case 'don':
                    case 'medical_examiner':
                    case 'legal_team':
                        $q->andWhere("p.{$field} != :{$field}")
                                ->setParameter($field, \DateTime::createFromFormat('d-m-Y', $value));
                    default:
                        if (is_array($value)) {
                            if (count($value) == 0) {
                                $value[] = 0;
                            }
                            $q->andWhere($q->expr()->notIn("p.{$field}", $value));
                        } else {
                            $q->andWhere("p.{$field} != :{$field}")
                                    ->setParameter($field, $value);
                        }
                        break;
                }
            }
        }
        foreach ($filtri['gt'] as $field => $value) {
            switch ($field) {
                case 'dasc':
                case 'dol':
                case 'don':
                case 'medical_examiner':
                case 'legal_team':
                    $q->andWhere("p.{$field} >= :{$field}")
                            ->setParameter($field, \DateTime::createFromFormat('d-m-Y', $value));
                    break;
                default:
                    $q->andWhere("p.{$field} >= :{$field}")
                            ->setParameter($field, $value);
                    break;
            }
        }
        foreach ($filtri['lt'] as $field => $value) {
            switch ($field) {
                case 'dasc':
                case 'dol':
                case 'don':
                case 'medical_examiner':
                case 'legal_team':
                    $q->andWhere("p.{$field} <= :{$field}")
                            ->setParameter($field, \DateTime::createFromFormat('d-m-Y', $value));
                    break;
                default:
                    $q->andWhere("p.{$field} <= :{$field}")
                            ->setParameter($field, $value);
                    break;
            }
        }
        foreach ($filtri['bt'] as $field => $value) {
            switch ($field) {
                case 'dasc':
                case 'dol':
                case 'don':
                case 'medical_examiner':
                case 'legal_team':
                    $q->andWhere("p.{$field} BETWEEN :{$field}_from AND {$field}_to")
                            ->setParameter($field . '_from', \DateTime::createFromFormat('d-m-Y', $value[0]))
                            ->setParameter($field . '_to', \DateTime::createFromFormat('d-m-Y', $value[1]));
                    break;
                default:
                    $q->andWhere("p.{$field} BETWEEN :{$field}_from AND {$field}_to")
                            ->setParameter($field . '_from', $value[0])
                            ->setParameter($field . '_to', $value[1]);
                    break;
            }
        }
        $q->orderBy($filtri['ob'][0], $filtri['ob'][1]);
        return $q;
    }

}

