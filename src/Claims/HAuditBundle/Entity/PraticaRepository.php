<?php

namespace Claims\HAuditBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PraticaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PraticaRepository extends EntityRepository {

    public function ricerca(Audit $audit, $filtri = array()) {
        $q = $this->createQueryBuilder('p')->where('p.audit = :audit')->setParameter('audit', $audit->getId());
        if (!count($filtri) == 0) {
            $sql_select = ' SELECT p.id ';
            $sql_from = '   FROM claims_h_audit_pratiche p LEFT JOIN claims_h_audit_pratica_question r ON r.pratica_id = p.id';
            $sql_where = '  WHERE p.audit_id = ' . $audit->getId() . ' ';
            $_ids = array();
            $ids = false;
            $q->leftJoin('p.question', 'q');
            foreach ($filtri as $id => $value) {
                if ($value && $value != array('from' => '', 'to' => '')) {
                    $sql_and = '   AND ';
                    $sql_params = array();
                    $question = $this->getEntityManager()->getRepository('ClaimsHAuditBundle:Question')->find($id);
                    /* @var $question Question */
                    switch ($question->getType()) {
                        case 'checkbox':
                        case 'select':
                            $sql_and .= 'r.question_id = :q' . $question->getId() . ' AND r.response = :r' . $question->getId();
                            $sql_params['q' . $question->getId()] = $question->getId();
                            $sql_params['r' . $question->getId()] = $value;
                            break;
                        case 'date':
                            $sql_and .= 'r.question_id = :q' . $question->getId() . ' AND r.response LIKE :r' . $question->getId();
                            $sql_params['q' . $question->getId()] = $question->getId();
                            $sql_params['r' . $question->getId()] = '%' . $value;
                            break;
                        case 'text':
                        case 'textarea':
                            $sql_and .= 'r.question_id = :q' . $question->getId() . ' AND r.response LIKE :r' . $question->getId();
                            $sql_params['q' . $question->getId()] = $question->getId();
                            $sql_params['r' . $question->getId()] = '%' . $value . '%';
                            break;
                        case 'money':
                        case 'number':
                        case 'percent':
                        case 'fx':
                            $sql_and .= '(r.question_id = :q' . $question->getId() . ' AND CAST(r.response AS UNSIGNED) BETWEEN :rf' . $question->getId() . ' AND :rt' . $question->getId() . ' )';
                            $sql_params['q' . $question->getId()] = $question->getId();
                            $sql_params['rf' . $question->getId()] = isset($value['from']) && $value['from'] != '' ? $value['from'] : -999999999;
                            $sql_params['rt' . $question->getId()] = isset($value['to']) && $value['to'] != '' ? $value['to'] : 999999999;
                            break;
                    }
                    $sql = $sql_select . $sql_from . $sql_where . $sql_and;
                    $connection = $this->getEntityManager()->getConnection();
                    $rows = $connection->executeQuery($sql, $sql_params);
                    $_ids[$question->getId()] = array();
                    foreach ($rows as $row) {
                        $_ids[$question->getId()][] = $row['id'];
                    }
                }
            }
            foreach ($_ids as $_id) {
                if (!$ids) {
                    $ids = $_id;
                } else {
                    $ids = array_intersect($ids, $_id);
                }
            }
            $q->andWhere($q->expr()->in('p.id', $ids));
        }
        return $q->getQuery()->execute();
    }

    public function cancellaAudit(Audit $audit) {
        $connection = $this->getEntityManager()->getConnection();
        $q = "   
DELETE FROM claims_h_audit_pratiche 
 WHERE audit_id = :audit
";
        $params = array(
            'audit' => $audit->getId(),
        );

        $connection->executeUpdate($q, $params);
    }

}
